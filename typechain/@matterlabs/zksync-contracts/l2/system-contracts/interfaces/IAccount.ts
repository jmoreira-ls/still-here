/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export type TransactionStruct = {
  txType: PromiseOrValue<BigNumberish>;
  from: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<BigNumberish>;
  ergsLimit: PromiseOrValue<BigNumberish>;
  ergsPerPubdataByteLimit: PromiseOrValue<BigNumberish>;
  maxFeePerErg: PromiseOrValue<BigNumberish>;
  maxPriorityFeePerErg: PromiseOrValue<BigNumberish>;
  paymaster: PromiseOrValue<BigNumberish>;
  reserved: PromiseOrValue<BigNumberish>[];
  data: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
  factoryDeps: PromiseOrValue<BytesLike>[];
  paymasterInput: PromiseOrValue<BytesLike>;
  reservedDynamic: PromiseOrValue<BytesLike>;
};

export type TransactionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[],
  string,
  string,
  string[],
  string,
  string
] & {
  txType: BigNumber;
  from: BigNumber;
  to: BigNumber;
  ergsLimit: BigNumber;
  ergsPerPubdataByteLimit: BigNumber;
  maxFeePerErg: BigNumber;
  maxPriorityFeePerErg: BigNumber;
  paymaster: BigNumber;
  reserved: BigNumber[];
  data: string;
  signature: string;
  factoryDeps: string[];
  paymasterInput: string;
  reservedDynamic: string;
};

export interface IAccountInterface extends utils.Interface {
  functions: {
    "executeTransaction(bytes32,bytes32,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[6],bytes,bytes,bytes32[],bytes,bytes))": FunctionFragment;
    "executeTransactionFromOutside((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[6],bytes,bytes,bytes32[],bytes,bytes))": FunctionFragment;
    "payForTransaction(bytes32,bytes32,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[6],bytes,bytes,bytes32[],bytes,bytes))": FunctionFragment;
    "prePaymaster(bytes32,bytes32,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[6],bytes,bytes,bytes32[],bytes,bytes))": FunctionFragment;
    "validateTransaction(bytes32,bytes32,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[6],bytes,bytes,bytes32[],bytes,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeTransaction"
      | "executeTransactionFromOutside"
      | "payForTransaction"
      | "prePaymaster"
      | "validateTransaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      TransactionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransactionFromOutside",
    values: [TransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "payForTransaction",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      TransactionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "prePaymaster",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      TransactionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransaction",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      TransactionStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransactionFromOutside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prePaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransaction",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransactionFromOutside(
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payForTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    prePaymaster(
      _txHash: PromiseOrValue<BytesLike>,
      _possibleSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  executeTransaction(
    _txHash: PromiseOrValue<BytesLike>,
    _suggestedSignedHash: PromiseOrValue<BytesLike>,
    _transaction: TransactionStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransactionFromOutside(
    _transaction: TransactionStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payForTransaction(
    _txHash: PromiseOrValue<BytesLike>,
    _suggestedSignedHash: PromiseOrValue<BytesLike>,
    _transaction: TransactionStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  prePaymaster(
    _txHash: PromiseOrValue<BytesLike>,
    _possibleSignedHash: PromiseOrValue<BytesLike>,
    _transaction: TransactionStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTransaction(
    _txHash: PromiseOrValue<BytesLike>,
    _suggestedSignedHash: PromiseOrValue<BytesLike>,
    _transaction: TransactionStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    executeTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransactionFromOutside(
      _transaction: TransactionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    payForTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    prePaymaster(
      _txHash: PromiseOrValue<BytesLike>,
      _possibleSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validateTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    executeTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransactionFromOutside(
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payForTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    prePaymaster(
      _txHash: PromiseOrValue<BytesLike>,
      _possibleSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransactionFromOutside(
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payForTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    prePaymaster(
      _txHash: PromiseOrValue<BytesLike>,
      _possibleSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTransaction(
      _txHash: PromiseOrValue<BytesLike>,
      _suggestedSignedHash: PromiseOrValue<BytesLike>,
      _transaction: TransactionStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
