/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IContractDeployerInterface extends utils.Interface {
  functions: {
    "create(bytes32,bytes32,bytes)": FunctionFragment;
    "create2(bytes32,bytes32,bytes)": FunctionFragment;
    "create2Account(bytes32,bytes32,bytes)": FunctionFragment;
    "createAccount(bytes32,bytes32,bytes)": FunctionFragment;
    "getNewAddressCreate(address,uint256)": FunctionFragment;
    "getNewAddressCreate2(address,bytes32,bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "create"
      | "create2"
      | "create2Account"
      | "createAccount"
      | "getNewAddressCreate"
      | "getNewAddressCreate2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create2",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create2Account",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewAddressCreate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewAddressCreate2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "create2Account",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewAddressCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewAddressCreate2",
    data: BytesLike
  ): Result;

  events: {
    "ContractDeployed(address,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractDeployed"): EventFragment;
}

export interface ContractDeployedEventObject {
  deployerAddress: string;
  bytecodeHash: string;
  contractAddress: string;
}
export type ContractDeployedEvent = TypedEvent<
  [string, string, string],
  ContractDeployedEventObject
>;

export type ContractDeployedEventFilter =
  TypedEventFilter<ContractDeployedEvent>;

export interface IContractDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IContractDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create2(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create2Account(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNewAddressCreate(
      _sender: PromiseOrValue<string>,
      _senderNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { newAddress: string }>;

    getNewAddressCreate2(
      _sender: PromiseOrValue<string>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { newAddress: string }>;
  };

  create(
    _salt: PromiseOrValue<BytesLike>,
    _bytecodeHash: PromiseOrValue<BytesLike>,
    _input: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create2(
    _salt: PromiseOrValue<BytesLike>,
    _bytecodeHash: PromiseOrValue<BytesLike>,
    _input: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create2Account(
    _salt: PromiseOrValue<BytesLike>,
    _bytecodeHash: PromiseOrValue<BytesLike>,
    _input: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    _salt: PromiseOrValue<BytesLike>,
    _bytecodeHash: PromiseOrValue<BytesLike>,
    _input: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNewAddressCreate(
    _sender: PromiseOrValue<string>,
    _senderNonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNewAddressCreate2(
    _sender: PromiseOrValue<string>,
    _bytecodeHash: PromiseOrValue<BytesLike>,
    _salt: PromiseOrValue<BytesLike>,
    _input: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    create(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { newAddress: string; constructorRevertData: string }
    >;

    create2(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { newAddress: string; constructorRevertData: string }
    >;

    create2Account(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { newAddress: string; constructorRevertData: string }
    >;

    createAccount(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { newAddress: string; constructorRevertData: string }
    >;

    getNewAddressCreate(
      _sender: PromiseOrValue<string>,
      _senderNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNewAddressCreate2(
      _sender: PromiseOrValue<string>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ContractDeployed(address,bytes32,address)"(
      deployerAddress?: PromiseOrValue<string> | null,
      bytecodeHash?: PromiseOrValue<BytesLike> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDeployedEventFilter;
    ContractDeployed(
      deployerAddress?: PromiseOrValue<string> | null,
      bytecodeHash?: PromiseOrValue<BytesLike> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): ContractDeployedEventFilter;
  };

  estimateGas: {
    create(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create2(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create2Account(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAccount(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNewAddressCreate(
      _sender: PromiseOrValue<string>,
      _senderNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewAddressCreate2(
      _sender: PromiseOrValue<string>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create2(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create2Account(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      _salt: PromiseOrValue<BytesLike>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNewAddressCreate(
      _sender: PromiseOrValue<string>,
      _senderNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewAddressCreate2(
      _sender: PromiseOrValue<string>,
      _bytecodeHash: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<BytesLike>,
      _input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
