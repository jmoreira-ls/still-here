import { utils, Wallet, Provider, EIP712Signer, types } from "zksync-web3";
import * as ethers from "ethers";
import { HardhatRuntimeEnvironment } from "hardhat/types";

// Put the address of your AA factory
const W_FACTORY_ADDRESS = "0x96d9170fD121B1bde343af8bE28aFBf2B8696122";

// An example of a deploy script deploys and calls a simple contract.
export default async function (hre: HardhatRuntimeEnvironment) {
  const provider = new Provider(hre.config.zkSyncDeploy.zkSyncNetwork);
  const wallet = new Wallet("<PRIVATE_KEY>").connect(provider);
  const factoryArtifact = await hre.artifacts.readArtifact("WFactory");

  const wFactory = new ethers.Contract(W_FACTORY_ADDRESS, factoryArtifact.abi, wallet);

  const days = 10;

  // For the simplicity of the tutorial, we will use zero hash as salt
  const salt = ethers.constants.HashZero;

  const tx = await wFactory.deployAccount(salt, wallet.address, days);
  await tx.wait();

  // Getting the address of the deployed contract
  const abiCoder = new ethers.utils.AbiCoder();
  const wallnutAddress = utils.create2Address(
    W_FACTORY_ADDRESS,
    await wFactory.aaBytecodeHash(),
    salt,
    abiCoder.encode(["address", "uint"], [wallet.address, days])
  );
  console.log(`Deployed on address ${wallnutAddress} with owner ${wallet.address}`);
}
